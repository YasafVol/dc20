{"compilerOptions":{"css":"external","dev":true,"hmr":true},"configFile":false,"extensions":[".svelte"],"preprocess":[{"name":"MeltUI Preprocess","markup":"async ({ content, filename }) => {\r\n      const config = {\r\n        alias: options?.alias ?? \"melt\",\r\n        markup: new MagicString(content, { filename }),\r\n        builders: [],\r\n        builderCount: 0,\r\n        content\r\n      };\r\n      let scriptContentNode;\r\n      const ast = parse(content, { css: false, filename });\r\n      const runesMode = isSvelte5 && await isRuneMode(ast, options);\r\n      if (ast.instance) {\r\n        walk(ast.instance, {\r\n          enter(node) {\r\n            if (node.type === \"Script\" && node.context === \"default\") {\r\n              scriptContentNode = node.content;\r\n            }\r\n          }\r\n        });\r\n      }\r\n      const leftOverActions = traverse({ baseNode: ast.html, config });\r\n      leftOverActions.forEach((action) => {\r\n        handleTopLevelAction({ actionNode: action, config });\r\n      });\r\n      let identifiersToInsert = \"\";\r\n      for (const builder of config.builders) {\r\n        let identifier = \"\";\r\n        if (\"identifierName\" in builder) {\r\n          identifier = builder.identifierName;\r\n        } else {\r\n          identifier = getMeltBuilderName(config.builderCount++);\r\n          if (runesMode) {\r\n            identifiersToInsert += `\tlet ${identifier} = $derived(${builder.expression.contents});\r\n`;\r\n          } else {\r\n            identifiersToInsert += `\t$: ${identifier} = ${builder.expression.contents};\r\n`;\r\n          }\r\n        }\r\n        const attributes = `{...${identifier}} use:${identifier}.action`;\r\n        config.markup.overwrite(builder.startPos, builder.endPos, attributes, {\r\n          storeName: true\r\n        });\r\n      }\r\n      if (identifiersToInsert) {\r\n        if (scriptContentNode) {\r\n          config.markup.appendRight(scriptContentNode.end, \"\\n\" + identifiersToInsert);\r\n        } else {\r\n          config.markup.prepend(\"<script>\\n\" + identifiersToInsert + \"\\n</script>\\n\");\r\n        }\r\n      }\r\n      return {\r\n        code: config.markup.toString()\r\n      };\r\n    }"},{"name":"vite-preprocess","style":"async ({ attributes, content, filename = '' }) => {\r\n\t\tconst ext = attributes.lang ? `.${attributes.lang}` : '.css';\r\n\t\tif (attributes.lang && !isCSSRequest(ext)) return;\r\n\t\tif (!cssTransform) {\r\n\t\t\tcssTransform = createCssTransform(style, config).then((t) => (cssTransform = t));\r\n\t\t}\r\n\t\tconst transform = await cssTransform;\r\n\t\tconst suffix = `${lang_sep}${ext}`;\r\n\t\tconst moduleId = `${filename}${suffix}`;\r\n\t\tconst { code, map, deps } = await transform(content, moduleId);\r\n\t\tremoveLangSuffix(map, suffix);\r\n\t\tmapToRelative(map, filename);\r\n\t\tconst dependencies = deps ? Array.from(deps).filter((d) => !d.endsWith(suffix)) : undefined;\r\n\t\treturn {\r\n\t\t\tcode,\r\n\t\t\tmap: map ?? undefined,\r\n\t\t\tdependencies\r\n\t\t};\r\n\t}"},{"script":"({ content, filename }) => {\r\n\t\tif (!filename) return;\r\n\r\n\t\tconst basename = path.basename(filename);\r\n\t\tif (basename.startsWith('+page.') || basename.startsWith('+layout.')) {\r\n\t\t\tconst match = content.match(options_regex);\r\n\t\t\tif (match) {\r\n\t\t\t\tconst fixed = basename.replace('.svelte', '(.server).js/ts');\r\n\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\r\n\t\t\t\t\t`\\`${match[1]}\\` will be ignored — move it to ${fixed} instead. See https://svelte.dev/docs/kit/page-options for more information.`;\r\n\r\n\t\t\t\tif (!warned.has(message)) {\r\n\t\t\t\t\tconsole.log(message);\r\n\t\t\t\t\twarned.add(message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","markup":"({ content, filename }) => {\r\n\t\tif (!filename) return;\r\n\r\n\t\tconst basename = path.basename(filename);\r\n\t\tconst has_children =\r\n\t\t\tcontent.includes('<slot') || (isSvelte5Plus() && content.includes('{@render'));\r\n\r\n\t\tif (basename.startsWith('+layout.') && !has_children) {\r\n\t\t\tconst message =\r\n\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\r\n\t\t\t\t`\\`<slot />\\`${isSvelte5Plus() ? ' or `{@render ...}` tag' : ''}` +\r\n\t\t\t\t' missing — inner content will not be rendered';\r\n\r\n\t\t\tif (!warned.has(message)) {\r\n\t\t\t\tconsole.log(message);\r\n\t\t\t\twarned.add(message);\r\n\t\t\t}\r\n\t\t}\r\n\t}"}]}